all:
	echo Done
installed:
	-rm Makefile
	ln -s Makefile.istalled Makefile
develop:
	-rm Makefile
	ln -s Makefile.develop Makefile




clean:
	-rm test* *~ @* # Makefile
	-rm -rf sort_tmp lattices
	-rm *.cif *.test *.gro *.nx3a *.ar3a *.ringtest *.pov *.nx3a *.ar3a *.ar3r *.nx4a *.xyz *.mdv *.mdva *.py *.scad *.ngph *.rings *.kg *.ringstat *_gro *.png *.svg *.exyz *.exmol *.graph *.yap




# debug in reshape
all: 5x3R.py lattices/5x3R.py 5x3R.nx3a.test
# new hydrogen-ordered family
all: A.nx3a.test   B.nx3a.test  13.nx3a.test
all: 3.ar3a.test   0.nx3a.test  5.gro.test   7.mdv.test
all: 5.gro_gro.test 7.mdva_gro.test 0.nx3a_gro.test 7.mdv_gro.test
all: 16.py   17.nx4a.test 1c.ar3r.test CS1.cif.test
all: CS2.cif.test HS1.yap.test TS1.nx3a.test 2dL.gro
all: 7.mdva.test
all: 1hreshape.py.test 2D3.ringtest.test
all: 3xFAU.nx3a.test
all: T.pov.test
all: 7-000.analice.nx3a.test
all: 2D3-000.analice.gro.test
all: 1h.ringstat.test
all: T.kg.test
all: RHO.nx3a.test
all: 9.nx3a.test dtc.nx3a.test
all: 2d.gro.test
all: 4.ngph.test
all: test1.done   test2.done   test3.done   test4.done
# all: 12.scad.test 
all: HS3.rings.yap.test
all: c0te.nx3a.test c1te.nx3a.test ice1hte.nx3a.test
all: i.graph.test
all: 0.exyz.test
all: 2.exmol.test
all: CS2A.gro.test CS2B.gro.test CS2C.gro.test
all: CS2D.gro.test
all: bilayer20.nx3a.test oprism7.nx3a
all: one.nx3a eleven.nx3a
all: 11-1.nx3a.test 11-5.nx3a.test 11-9.nx3a.test 11-13.nx3a.test
all: 11-2.nx3a.test 11-6.nx3a.test 11-10.nx3a.test 11-14.nx3a.test
all: 11-3.nx3a.test 11-7.nx3a.test 11-11.nx3a.test 11-15.nx3a.test
all: 11-4.nx3a.test 11-8.nx3a.test 11-12.nx3a.test 11-16.nx3a.test



# ice XI polymorphs
11-%.nx3a:
	$(GENICE) --depol=none 11i[$*] -f euler | fgrep -v "Command line:" > $@


%.test: %
	diff -w -I '^#' $(REFD)/$< $<  && touch $@
# make refs
#	cp $< $(REFD); touch $@
%.rings.yap: $(FMT)/rings.py
	$(GENICE) $* -r 2 2 2 -f rings | fgrep -v "Command line:" > $@
%.ringstat: $(FMT)/_ringstat.py
	$(GENICE) $* -f _ringstat -r 2 2 2 | fgrep -v "Command line:" > $@
%.kg: $(FMT)/_KG.py
	$(GENICE) $* -f _KG | fgrep -v "Command line:" > $@
%.nx3a: $(FMT)/euler.py
	$(GENICE) $* --debug -f euler | fgrep -v "Command line:" > $@
test1.done: $(FMT)/gromacs.py
	$(GENICE) __test1 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test1.done
test2.done: $(FMT)/gromacs.py
	$(GENICE) __test2 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test2.done
test3.done: $(FMT)/gromacs.py
	$(GENICE) __test3 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test3.done
test4.done: $(FMT)/gromacs.py
	$(GENICE) __test4 --guest 12=g12 --rep 1 1 1 --debug > /dev/null
	touch test4.done
2d.gro: $(FMT)/gromacs.py
	$(GENICE) 2d --rep 2 2 3 | fgrep -v "Command line:" > $@
3.ar3a: $(FMT)/com.py
	$(GENICE) 3  --rep 2 2 3 --format c | fgrep -v "Command line:" > $@
4.ngph: $(FMT)/digraph.py
	$(GENICE) 4  --rep 2 2 3 --format d | fgrep -v "Command line:" > $@
%.graph: $(FMT)/graph.py
	$(GENICE) $*  --rep 2 2 2 --format graph | fgrep -v "Command line:" > $@
%.exyz: $(FMT)/exyz.py
	$(GENICE) $*  --rep 2 2 2 --format exyz | fgrep -v "Command line:" > $@
%.exmol: $(FMT)/exyz.py
	$(GENICE) $*  --rep 2 2 2 --format exmol --water 6site | fgrep -v "Command line:" > $@
%.nx3a:  $(FMT)/euler.py
	$(GENICE) $* --rep 2 2 3 --debug --format e | fgrep -v "Command line:" > $@
5.gro: $(FMT)/gromacs.py
	$(GENICE) 5  --rep 2 2 4 --format g --water physical_water | fgrep -v "Command line:" > $@
7.mdv: $(FMT)/mdview.py
	$(GENICE) 7  --rep 2 2 4 --format m | fgrep -v "Command line:" > $@
7.mdva: $(FMT)/mdv_au.py
	$(GENICE) 7  --rep 2 2 4 --format mdv_au | fgrep -v "Command line:" > $@
12.scad: $(FMT)/openscad.py
	$(GENICE) 12 --rep 2 2 3 --format o | fgrep -v "Command line:" > $@
16.py: $(FMT)/python.py
	$(GENICE) 16 --rep 1 1 2 --format p | fgrep -v "Command line:" > $@
17.nx4a: $(FMT)/quaternion.py
	$(GENICE) 17 --rep 1 1 2 --format q | fgrep -v "Command line:" > $@
1c.ar3r: $(FMT)/rcom.py
	$(GENICE) 1c --rep 1 1 2 --format r | fgrep -v "Command line:" > $@
CS1.cif: $(FMT)/cif.py
	$(GENICE) CS1 --guest 14=uathf*0.5 -G 0=me --rep 1 1 2 --format cif | fgrep -v "Command line:" > $@
CS2.cif: $(FMT)/cif.py
	$(GENICE) CS2 --depol=none -c 0=Na -a 1=Cl --rep 1 1 2 --format cif | fgrep -v "Command line:" > $@
#;$(UTIL)/cifdiff.sh $(REFD)/$@ $@

#tests for molecules
CS2A.gro: $(FMT)/gromacs.py
	$(GENICE) CS2 --depol=none -g 12=me -g 16=uathf6 --rep 1 1 2 --water spce | fgrep -v "Command line:" > $@
CS2B.gro: $(FMT)/gromacs.py
	$(GENICE) CS2 --depol=none -g 12=co2 -g 16=uathf --rep 1 1 2 --water 5site  | fgrep -v "Command line:" > $@
CS2C.gro: $(FMT)/gromacs.py
	$(GENICE) CS2 --depol=none -g 12=H2 -g 16=ch4 --rep 1 1 2 --water ice  | fgrep -v "Command line:" > $@

#test for cage assessment
CS2D.gro: $(FMT)/gromacs.py
	$(GENICE) CS2 -A -g A12=me --rep 1 1 2 --water ice  | fgrep -v "Command line:" > $@

HS1.yap: $(FMT)/yaplot.py $(GRP)/CH3CH2CH2CH2.py $(GRP)/Bu.py $(LIB)/alkyl.py
#test for spot semiclathrate (TBAB)
	$(GENICE) HS1 -s 1001 --shift 0 0.75 0.5 --depol=none -c 3=N -a 1=Br -H 11=CH3CH2CH2CH2:3 -H 9=CH3CH2CH2CH2:3 -H 13=Bu:3 -H 7=Bu:3 --rep 1 1 2 --format yaplot | fgrep -v "Command line:" > $@
TS1.nx3a: $(FMT)/euler.py
	$(GENICE) TS1 --guest 14=mol[THF.mol] --rep 1 1 2 --format euler | fgrep -v "Command line:" > $@
c0te.nx3a: $(FMT)/euler.py
	$(GENICE) c0te --guest Ne1=g12 --rep 2 2 2 --format euler | fgrep -v "Command line:" > $@
c1te.nx3a: $(FMT)/euler.py
	$(GENICE) c1te --guest Ne1=g12 --rep 1 1 2 --format euler | fgrep -v "Command line:" > $@
ice1hte.nx3a: $(FMT)/euler.py
	$(GENICE) ice1hte --guest Ne1=g12 --rep 1 1 2 --format euler | fgrep -v "Command line:" > $@
T.pov: $(FMT)/povray.py
	$(GENICE) T --guest 12=g12 --rep 1 1 1 --format povray | fgrep -v "Command line:" > $@
2dL.gro: $(FMT)/gromacs.py
	$(GENICE) 2d --rep 6 6 6 | fgrep -v "Command line:" > $@
1hreshape.py: $(FMT)/python.py
	$(GENICE) 1h --reshape 1,1,-2,1,-1,0,1,1,1 -f python | fgrep -v "Command line:" > $@
2D3.ringtest: $(FMT)/_ringstat.py
	$(GENICE) 2D3 --rep 5 5 1 --format _ringstat --depol=optimal | fgrep -v "Command line:" > $@
oprism7.nx3a: $(FMT)/euler.py
	$(GENICE) oprism[7] --rep 1 1 1 --format euler --depol=none | fgrep -v "Command line:" > $@
3xFAU.nx3a: $(FMT)/euler.py
	$(GENICE) xFAU[3] --rep 1 1 1 --format euler | fgrep -v "Command line:" > $@
7.gro: $(FMT)/gromacs.py
	$(GENICE) 7 -r 2 2 2 | fgrep -v "Command line:" > $@
bilayer20.nx3a: $(LTC)/bilayer.py
	$(GENICE) bilayer[size=36,40:sw=0.2] -f euler | fgrep -v "Command line:" > $@
one.nx3a: $(LTC)/one.py $(FMT)/euler.py
	$(GENICE) one[ccchchc] --rep 1 1 1 --format euler | fgrep -v "Command line:" > $@
eleven.nx3a: $(LTC)/eleven.py $(FMT)/euler.py
	$(GENICE) eleven[ccchchc] --rep 1 1 1 --format euler | fgrep -v "Command line:" > $@


# they are now in a separate module.
#MTN.gro: $(LTC)/zeolite.py $(FMT)/gromacs.py
#	$(GENICE) zeolite[MTN] --rep 1 1 1 | fgrep -v "Command line:" > $@
#MTN.re.gro: MTN.cif $(LTC)/cif.py $(FMT)/gromacs.py
#	$(GENICE) cif[MTN.cif] --rep 1 1 1 | fgrep -v "Command line:" > $@
#ITT.gro: $(LTC)/zeolite.py $(FMT)/gromacs.py
#	$(GENICE) zeolite[ITT] --rep 1 1 1 | fgrep -v "Command line:" > $@
7-000.analice.nx3a: 7.gro $(FMT)/euler.py
	$(ANALICE) $< -f euler --debug -o '7-%03d.analice.nx3a'
2D3.gro: $(FMT)/gromacs.py
	$(GENICE) 2D3 -r 4 4 1 --depol=optimal | fgrep -v "Command line:" > $@
2D3-000.analice.gro: 2D3.gro $(FMT)/euler.py
	$(ANALICE) $< -f gromacs -o '2D3-%03d.analice.gro'

# loader2 test
# ar3rの場合、配向はランダムで決める必要があるが、analiceは乱数利用を想定していないので、
# 現時点ではar3aの読み込みは公式にはサポートしない。
#%.ar3r_gro: %.ar3r $(LDR)/ar3r.py
#	$(ANALICE) $< | fgrep -v "Command line:" > $@


%.mdva_gro: %.mdva $(LDR)/mdva.py
	cat $< $< $< > rep3.$<
	$(ANALICE) rep3.$< | fgrep -v "Command line:" > $@
	-rm rep3.$<
%.mdv_gro: %.mdv $(LDR)/mdv.py
	cat $< $< $< > rep3.$<
	$(ANALICE) rep3.$< | fgrep -v "Command line:" > $@
	-rm rep3.$<
%.gro_gro: %.gro $(LDR)/gro.py
	cat $< $< $< > rep3.$<
	$(ANALICE) rep3.$< -O O -H H | fgrep -v "Command line:" > $@
	-rm rep3.$<
%.nx3a_gro: %.nx3a $(LDR)/nx3a.py
	cat $< $< $< > rep3.$<
	$(ANALICE) rep3.$< --debug | fgrep -v "Command line:" > $@
	-rm rep3.$<



# reshape debug
5x3R.py:
	$(GENICE) 5 --reshape 1,0,0,0,1,0,1,0,3 -f python | fgrep -v "Command line:" > $@
lattices/5x3R.py: 5x3R.py
	-mkdir lattices
	cp $< lattices
5x3R.nx3a: lattices/5x3R.py
	$(GENICE) 5x3R -f euler | fgrep -v "Command line:" > $@
